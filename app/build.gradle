buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

apply plugin: 'io.fabric'


// Store keystore
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion project.compileSdkVersion
    buildToolsVersion project.buildToolsVersion
    defaultConfig {
        applicationId "quangnam.com.sample"
        minSdkVersion project.minSdkVersion
        targetSdkVersion project.targetSdkVersion
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
//            minifyEnabled false
//            debuggable true
            applicationIdSuffix ".debug"
            buildConfigField("String", "BASE_URL", "\"https://dog.ceo/\"")
            buildConfigField("String", "API_TOKEN", "\"Token\"")
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            buildConfigField("String", "BASE_URL", "\"https://dog.ceo/\"")
            buildConfigField("String", "API_TOKEN", "\"Token\"")
        }
        staging {
            initWith debug
            applicationIdSuffix ".releaseStaging"
        }
    }
    signingConfigs {
        release {
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

configurations.all {
    resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.1'
}

dependencies {
    compile project(":base")
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    // RxJava
    compile "io.reactivex.rxjava2:rxjava:" + project.rxJavaVersion

    // ButterKnife
    compile 'com.jakewharton:butterknife:' + project.butterKnifeVersion
    annotationProcessor 'com.jakewharton:butterknife-compiler:' + project.butterKnifeVersion

    // Dagger
    compile "com.google.dagger:dagger:$project.daggerVersion"
    compile "com.google.dagger:dagger-android-support:$project.daggerVersion"
    kapt "com.google.dagger:dagger-android-processor:$project.daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$project.daggerVersion"

    // Retrofit
    compile "com.squareup.retrofit2:retrofit:$project.retrofitVersion"
    compile "com.squareup.retrofit2:converter-gson:$project.retrofitVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$project.okhttpLoggerVersion"
    compile 'com.squareup.retrofit2:adapter-rxjava2:' + project.retrofitVersion

    // Google support
    compile "com.android.support:appcompat-v7:$project.appcompatVersion"
    compile "com.android.support.constraint:constraint-layout:$project.constraintLayoutVersion"
    testCompile 'junit:junit:4.12'

    // Multidex
    compile 'com.android.support:multidex:' + project.multidexVersion

    // Firebase
    compile 'com.google.firebase:firebase-messaging:' + firebaseVersion
    compile('com.crashlytics.sdk.android:crashlytics:2.9.5@aar') {
        transitive = true;
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}

//apply plugin: 'com.google.gms.google-services'
